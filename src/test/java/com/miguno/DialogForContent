import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.dependency.JavaScript;
import com.vaadin.flow.component.dependency.StyleSheet;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.json.JSONObject;
import org.json.XML;
import org.springframework.beans.factory.annotation.Autowired;
import lombok.Getter;
import lombok.Setter;

@SpringComponent
@JavaScript("https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js")
@JavaScript("https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-json.min.js")
@JavaScript("https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-markup.min.js")
@StyleSheet("https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css")
@Getter
@Setter
public class FormattedDialog extends Dialog {

    private Div contentArea;
    private ObjectMapper objectMapper;

    @Autowired
    public FormattedDialog(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
        this.objectMapper.enable(SerializationFeature.INDENT_OUTPUT);

        contentArea = new Div();
        contentArea.getStyle()
            .set("max-height", "400px")
            .set("overflow", "auto")
            .set("font-family", "monospace");

        VerticalLayout layout = new VerticalLayout(contentArea);
        layout.setPadding(true);
        layout.setSpacing(true);

        Button closeButton = new Button("Close", event -> close());

        add(layout, closeButton);
    }

    public void setContent(String content) {
        String formattedContent;
        String language;

        try {
            // Try to parse as JSON
            JSONObject jsonObject = new JSONObject(content);
            formattedContent = objectMapper.writeValueAsString(jsonObject);
            language = "language-json";
        } catch (Exception e) {
            try {
                // If not JSON, try to parse as XML
                String formattedXml = XML.toString(XML.toJSONObject(content), 2);
                formattedContent = formattedXml;
                language = "language-markup";
            } catch (Exception ex) {
                // If neither JSON nor XML, display as plain text
                formattedContent = content;
                language = "language-plaintext";
            }
        }

        String escapedContent = escapeHtml(formattedContent);
        contentArea.getElement().setProperty("innerHTML", 
            "<pre><code class=\"" + language + "\">" + escapedContent + "</code></pre>");
        
        // Trigger PrismJS highlighting
        getElement().executeJs("Prism.highlightAllUnder($0)", contentArea.getElement());
    }

    private String escapeHtml(String content) {
        return content.replace("&", "&amp;")
                      .replace("<", "&lt;")
                      .replace(">", "&gt;")
                      .replace("\"", "&quot;")
                      .replace("'", "&#039;");
    }

    public void open(String content) {
        setContent(content);
        super.open();
    }
}
