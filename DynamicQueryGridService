package c.p.a.s.vet;

import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.GridVariant;
import com.vaadin.flow.data.provider.CallbackDataProvider;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.data.renderer.LocalDateRenderer;
import com.vaadin.flow.data.renderer.LocalDateTimeRenderer;
import com.vaadin.flow.data.renderer.NumberRenderer;
import com.vaadin.flow.spring.annotation.SpringComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.*;

@SpringComponent
public class DynamicQueryGridService {
    private static final Logger logger = LoggerFactory.getLogger(DynamicQueryGridService.class);
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public DynamicQueryGridService(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    public Grid<Map<String, Object>> createDynamicGrid(String sqlQuery) {
        Grid<Map<String, Object>> grid = new Grid<>();
        grid.addThemeVariants(GridVariant.LUMO_ROW_STRIPES, GridVariant.LUMO_COMPACT);

        // Wrap original query with ROWNUM for safe sorting and pagination
        String wrappedQuery = "SELECT inner_query.* FROM (" + sqlQuery + ") inner_query";
        
        // Extract column metadata
        List<ColumnMetadata> columns = getColumnMetadata(wrappedQuery);
        
        // Configure grid columns based on metadata
        configureGridColumns(grid, columns);
        
        // Create final paginated query with UI_ROWNUM
        String paginatedQuery = "SELECT ROWNUM as UI_ROWNUM, inner_query.* FROM (" + sqlQuery + ") inner_query ORDER BY UI_ROWNUM";

        // Set up data provider for the grid
        DataProvider<Map<String, Object>, Void> dataProvider = createDataProvider(paginatedQuery, columns);
        grid.setItems(dataProvider);
        
        return grid;
    }

    private List<ColumnMetadata> getColumnMetadata(String sqlQuery) {
        logger.info("Extracting column metadata for query: {}", sqlQuery);
        
        List<ColumnMetadata> columns = new ArrayList<>();
        
        // Retrieve metadata with limit 0 to avoid fetching actual data
        String metadataQuery = sqlQuery + " WHERE 1=0";
        
        try {
            jdbcTemplate.query(metadataQuery, (rs, rowNum) -> {
                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();
                
                for (int i = 1; i <= columnCount; i++) {
                    String name = metaData.getColumnLabel(i);
                    int sqlType = metaData.getColumnType(i);
                    String typeName = metaData.getColumnTypeName(i);
                    
                    Class<?> javaType = mapSqlTypeToJavaType(sqlType, typeName);
                    columns.add(new ColumnMetadata(name, sqlType, typeName, javaType));
                    
                    logger.info("Column: {}, SQL Type: {}, Java Type: {}", 
                               name, typeName, javaType.getSimpleName());
                }
                return null;
            });
        } catch (DataAccessException e) {
            logger.error("Error retrieving column metadata", e);
            throw e;
        }
        
        return columns;
    }

    private Class<?> mapSqlTypeToJavaType(int sqlType, String typeName) {
        switch (sqlType) {
            case Types.CHAR:
            case Types.VARCHAR:
            case Types.LONGVARCHAR:
                return String.class;
            case Types.NUMERIC:
            case Types.DECIMAL:
                return BigDecimal.class;
            case Types.BIT:
            case Types.BOOLEAN:
                return Boolean.class;
            case Types.TINYINT:
            case Types.SMALLINT:
            case Types.INTEGER:
                return Integer.class;
            case Types.BIGINT:
                return Long.class;
            case Types.REAL:
            case Types.FLOAT:
            case Types.DOUBLE:
                return Double.class;
            case Types.BINARY:
            case Types.VARBINARY:
            case Types.LONGVARBINARY:
            case Types.BLOB:
                return byte[].class;
            case Types.DATE:
                return LocalDate.class;
            case Types.TIME:
            case Types.TIMESTAMP:
                return LocalDateTime.class;
            default:
                // For unknown types, default to String
                return String.class;
        }
    }

    private void configureGridColumns(Grid<Map<String, Object>> grid, List<ColumnMetadata> columns) {
        for (ColumnMetadata col : columns) {
            Grid.Column<Map<String, Object>> column;
            
            // Skip the UI_ROWNUM column - we don't display this in the UI
            if ("UI_ROWNUM".equals(col.name())) {
                continue;
            }
            
            if (col.javaType() == String.class) {
                column = grid.addColumn(item -> (String) item.get(col.name()));
            } else if (col.javaType() == Integer.class) {
                column = grid.addColumn(item -> (Integer) item.get(col.name()))
                          .setTextAlign(ColumnTextAlign.END);
            } else if (col.javaType() == Long.class) {
                column = grid.addColumn(item -> (Long) item.get(col.name()))
                          .setTextAlign(ColumnTextAlign.END);
            } else if (col.javaType() == Double.class) {
                column = grid.addColumn(new NumberRenderer<>(
                          item -> (Double) item.get(col.name()),
                          NumberFormat.getNumberInstance()))
                          .setTextAlign(ColumnTextAlign.END);
            } else if (col.javaType() == BigDecimal.class) {
                column = grid.addColumn(new NumberRenderer<>(
                          item -> (BigDecimal) item.get(col.name()),
                          NumberFormat.getCurrencyInstance()))
                          .setTextAlign(ColumnTextAlign.END);
            } else if (col.javaType() == LocalDate.class) {
                column = grid.addColumn(new LocalDateRenderer<>(
                          item -> (LocalDate) item.get(col.name()),
                          DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)));
            } else if (col.javaType() == LocalDateTime.class) {
                column = grid.addColumn(new LocalDateTimeRenderer<>(
                          item -> (LocalDateTime) item.get(col.name()),
                          DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)));
            } else if (col.javaType() == byte[].class) {
                // Special handling for binary data like BLOBs
                column = grid.addColumn(item -> {
                    byte[] data = (byte[]) item.get(col.name());
                    if (data == null) {
                        return "No data";
                    } else {
                        return formatByteSize(data.length);
                    }
                });
            } else {
                // Default handling for other types
                column = grid.addColumn(item -> {
                    Object value = item.get(col.name());
                    return value != null ? value.toString() : "";
                });
            }
            
            column.setHeader(col.name());
            column.setResizable(true);
            column.setSortable(false); // Disable column sorting as we're using UI_ROWNUM
        }
    }

    private DataProvider<Map<String, Object>, Void> createDataProvider(String query, List<ColumnMetadata> columns) {
        return DataProvider.fromCallbacks(
            // First callback: fetches items for the current page
            fetchCallback -> {
                int offset = fetchCallback.getOffset();
                int limit = fetchCallback.getLimit();
                
                String paginatedQuery = query + 
                    " OFFSET " + offset + " ROWS FETCH NEXT " + limit + " ROWS ONLY";
                
                logger.info("Executing query: {}", paginatedQuery);
                
                List<Map<String, Object>> items = jdbcTemplate.query(
                    paginatedQuery,
                    new DebugRowMapper(columns)
                );
                
                return items.stream();
            },
            // Second callback: counts total items for pagination
            countCallback -> {
                String countQuery = "SELECT COUNT(*) FROM (" + query.replaceAll("ORDER BY UI_ROWNUM", "") + ")";
                return jdbcTemplate.queryForObject(countQuery, Integer.class);
            }
        );
    }

    private String formatByteSize(long bytes) {
        final String[] units = new String[] { "B", "KB", "MB", "GB", "TB" };
        int unitIndex = 0;
        double size = bytes;
        
        while (size > 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        
        return String.format("%.2f %s", size, units[unitIndex]);
    }

    // Custom RowMapper for debugging and handling mixed data types
    private static class DebugRowMapper implements RowMapper<Map<String, Object>> {
        private final List<ColumnMetadata> columns;
        
        public DebugRowMapper(List<ColumnMetadata> columns) {
            this.columns = columns;
        }
        
        @Override
        public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
            Map<String, Object> row = new HashMap<>();
            ResultSetMetaData metaData = rs.getMetaData();
            
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                String columnName = metaData.getColumnLabel(i);
                int sqlType = metaData.getColumnType(i);
                
                // Find column metadata by name
                ColumnMetadata colMeta = findColumnMetadata(columnName);
                
                if (colMeta != null) {
                    try {
                        if (colMeta.javaType() == String.class) {
                            row.put(columnName, rs.getString(i));
                        } else if (colMeta.javaType() == Integer.class) {
                            row.put(columnName, rs.getInt(i));
                            if (rs.wasNull()) row.put(columnName, null);
                        } else if (colMeta.javaType() == Long.class) {
                            row.put(columnName, rs.getLong(i));
                            if (rs.wasNull()) row.put(columnName, null);
                        } else if (colMeta.javaType() == Double.class) {
                            row.put(columnName, rs.getDouble(i));
                            if (rs.wasNull()) row.put(columnName, null);
                        } else if (colMeta.javaType() == BigDecimal.class) {
                            row.put(columnName, rs.getBigDecimal(i));
                        } else if (colMeta.javaType() == LocalDate.class) {
                            Date date = rs.getDate(i);
                            row.put(columnName, date != null ? date.toLocalDate() : null);
                        } else if (colMeta.javaType() == LocalDateTime.class) {
                            Timestamp timestamp = rs.getTimestamp(i);
                            row.put(columnName, timestamp != null ? timestamp.toLocalDateTime() : null);
                        } else if (colMeta.javaType() == byte[].class) {
                            row.put(columnName, rs.getBytes(i));
                        } else {
                            // Default to string for unknown types
                            row.put(columnName, rs.getString(i));
                        }
                    } catch (SQLException e) {
                        logger.warn("Error retrieving column {}: {}", columnName, e.getMessage());
                        // Fall back to string for problematic types
                        row.put(columnName, rs.getString(i));
                    }
                } else {
                    // Handle the case for UI_ROWNUM, which won't be in the original columns list
                    if ("UI_ROWNUM".equals(columnName)) {
                        row.put(columnName, rs.getLong(i));
                        if (rs.wasNull()) row.put(columnName, null);
                    } else {
                        row.put(columnName, rs.getString(i));
                    }
                }
            }
            
            return row;
        }
        
        private ColumnMetadata findColumnMetadata(String name) {
            return columns.stream()
                .filter(col -> col.name().equals(name))
                .findFirst()
                .orElse(null);
        }
    }

    // Immutable record for column metadata
    private record ColumnMetadata(String name, int sqlType, String typeName, Class<?> javaType) {}
}
